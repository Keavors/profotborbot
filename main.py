# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A0JEj7rEdlsj7xmxhsgFTPGed8-X0dkO
"""

!pip install pyTelegramBotAPI

import telebot
from telebot import types
import random
# --- НОВЫЕ ИМПОРТЫ ДЛЯ WEBHHOOKS ---
from flask import Flask, request
import os # Для получения порта из окружения на хостинге
# ------------------------------------

TOKEN = '8041179077:AAGyyuhNxftV7uX8WLnjmXO7IQmSBALqFX4'
bot = telebot.TeleBot(TOKEN)

# --- Инициализация Flask приложения ---
app = Flask(__name__)
# ------------------------------------

# Здесь будут храниться данные о текущем тесте для каждого пользователя
user_states = {}

questions = [
    {
        "id": 1,
        "type": "single_choice",
        "question": "Задание №1\nОтмс это Упдмс?",
        "options": ["yes", "не"],
        "correct_answer": "не",
        "points": 1
    },
    {
        "id": 2,
        "type": "single_choice",
        "question": "Задание №2\nчто такое черный?",
        "options": ["красный", "желтый"],
        "correct_answer": "красный",
        "points": 1
    },
    {
        "id": 3,
        "type": "single_choice",
        "question": "Задание №3\nСалфетки нужны чтобы в них..",
        "options": ["сморкались", "кончали", "кричали", "рубили", "страдали"],
        "correct_answer": "сморкались",
        "points": 3
    },
    {
        "id": 4,
        "type": "single_choice",
        "question": "Задание №4\nкак вам пидорасы в плане секса?",
        "options": ["вкусно", "не очень", "совсем плохо"],
        "correct_answer": "совсем плохо",
        "points": 1
    },
    {
        "id": 5,
        "type": "single_choice",
        "question": "Задание №5\nДоза пенициллина беременным женщинам на 12 месяце беременности",
        "options": ["6.000.000", "60.000.000", "600.000.000", "0.1", "как по кайфу ежжи"],
        "correct_answer": "6.000.000",
        "points": 3
    },
    {
        "id": 6,
        "type": "single_choice",
        "question": "Задание №6\nКак называется локоть по латински?",
        "options": ["Olecranonus", "Needus for Speedus", "AlboSUS Damboldurus", "Foramen pisos", "Ты хуесос"],
        "correct_answer": "Olecranonus",
        "points": 3
    },
    {
        "id": 7,
        "type": "single_choice",
        "question": "Задание №7\nСамый сильный курсант в истории:",
        "options": ["Гонорей Гаймороев", "Геморой Черкашеев", "Антогонист Протогонеев", "Чурек Бешкердырбекеев", "Говниль Чумишеев"],
        "correct_answer": "Говниль Чумишеев",
        "points": 3
    },
    {
        "id": 8,
        "type": "single_choice",
        "question": "Задание №8\nЗадачи физической подготовки",
        "options": ["Люто дрочиться", "Бегать вокруг ГК", "Встать нихуя не выспавшимся на зарядку в -30", "разрывать мышцы нахуй", "люто проводить УФЗ"],
        "correct_answer": "Люто дрочиться",
        "points": 3
    },
    {
        "id": 9,
        "type": "matching",
        "question": "Задание №9\nУстановите соответствие\n",
        "left_options": ["Райан Гослинг", "Ногтевая пластинка", "Резорбтивная", "Чувство насыщения", "Рвота"],
        "right_options": ["Блевотурия", "В фильме елда", "После каловыделения", "В очке", "Зиготой"],
        "correct_matches": {"Райан Гослинг": "В фильме елда", "Ногтевая пластинка": "В очке", "Резорбтивная": "Блевотурия", "Чувство насыщения": "После каловыделения", "Рвота": "Зиготой"},
        "points": 5
    },
    {
        "id": 10,
        "type": "single_choice",
        "question": "Задание №10\nСамый?",
        "options": ["1", "полипептид А", "задание 11", "вставьте текст", "неправильный ответ"],
        "correct_answer": "неправильный ответ",
        "points": 3
    },
    {
        "id": 11,
        "type": "single_choice",
        "question": "Задание №11\nРучка",
        "options": ["Младенца", "дверная", "Авто", "Ты еблан?", "акушера"],
        "correct_answer": "Ты еблан?",
        "points": 1
    },
    {
        "id": 12,
        "type": "open_answer",
        "question": "Задание №12\nУшастая бебра\nЗапишите ответ:",
        "correct_answer": "Зайцев Заяц Зайнц",
        "points": 1
    },
    {
        "id": 13,
        "type": "ordering",
        "question": "Задание №13\nСоставьте график курсанта 5 курса\n",
        "options": ["встать с кровати", "покакать люто", "лечь на кровать", "пойти на кухню", "доесть остатки"],
        "correct_order": ["встать с кровати", "доесть остатки", "пойти на кухню", "покакать люто", "лечь на кровать"],
        "points": 5
    },
    {
        "id": 14,
        "type": "single_choice",
        "question": "Задание №14\n\"Ситуационная задача: в классе сидят Долгажин, Зайнц, Бобров, Стриков, Семенчук. Заходит Шилков и говорит, что надо въебать кого то в наряд? кто должен дрочкануться и пойти служить отчизне?\"",
        "options": ["Зайнц", "Долгажин", "Бобров", "Семенчук", "Стриков"],
        "correct_answer": "Зайнц",
        "points": 3
    },
    {
        "id": 15,
        "type": "single_choice",
        "question": "Задание №15\nМогут ли камни?",
        "options": ["что могут", "могут", "ладно", "через немогу", "через нехочу", "а что камни"],
        "correct_answer": "ладно",
        "points": 3
    },
    {
        "id": 16,
        "type": "single_choice",
        "question": "Задание №16\nЧто надо делать при входе в УЛК?",
        "options": ["показать пропуск", "встать смирно", "послать бабку нах", "выйти из УЛК и пойти домой", "достать телефон и отнести на ЗГТ"],
        "correct_answer": "выйти из УЛК и пойти домой",
        "points": 3
    },
    {
        "id": 17,
        "type": "single_choice",
        "question": "Задание №17\nКто убил Пушкина на дуэли",
        "options": ["Пуля", "Пистолет", "Смертььь", "Ранение", "Раниль"],
        "correct_answer": "Раниль",
        "points": 3
    },
    {
        "id": 18,
        "type": "single_choice",
        "question": "Задание №18\nдисциплина об управлении медпунктом?",
        "options": ["УПДМС", "ОТПДМС", "ПМС", "ЧСС", "ОТМС"],
        "correct_answer": "УПДМС",
        "points": 1
    },
    {
        "id": 19,
        "type": "single_choice",
        "question": "Задание №19\n\"Ситуационная задача: в части приказали сдать телефоны, личный состав 200 человек, сколько теефонов сдали?\"",
        "options": ["1 телефон разбитый нахуй в дребезги", "какие нахуй телефоны в части вы че ебнутые", "250", "весь личный состав в проебе", "по кайфу ежжи"],
        "correct_answer": "какие нахуй телефоны в части вы че ебнутые",
        "points": 1
    },
    {
        "id": 20,
        "type": "single_choice",
        "question": "Задание №20\n\"Выберите ответ \"\"выбрать\"\"\"",
        "options": ["ответить", "выбрать", "обозначить", "выделить", "отметить"],
        "correct_answer": "выбрать",
        "points": 1
    },
    {
        "id": 21,
        "type": "single_choice",
        "question": "Задание №21\nУ кого в бригаде по другому было?",
        "options": ["Унгуряны", "Заринов", "Заманов", "В-иксов"],
        "correct_answer": "Унгуряны",
        "points": 1
    },
    {
        "id": 22,
        "type": "multiple_choice",
        "question": "Задание №22\nЧто должен делать начмед в бригаде?",
        "options": ["Лечить", "Нарулить башмаки бомжам (личному составу)", "помыть чурок", "продать коробку промедола комадиру 1 взвода", "знать за что тебя ебут", "класть больных чумой к себе в кабинет потому что больше некуда а ты печальный", "принять отсутствие танка", "жестко служить"],
        "correct_answers": ["Нарулить башмаки бомжам (личному составу)", "помыть чурок", "продать коробку промедола комадиру 1 взвода", "знать за что тебя ебут", "класть больных чумой к себе в кабинет потому что больше некуда а ты печальный", "принять отсутствие танка", "жестко служить"],
        "points": 3
    },
    {
        "id": 23,
        "type": "single_choice",
        "question": "Задание №23\nНачальник академии приказал после отпуска прибыть в академию 1 сентяблября в 8 утра. Во сколько курсанты должны стоять на плацу?(курсанты 5 курса)",
        "options": ["ч+10мин * n(n=кол-во начальников между начальником академии и курсантом)", "как по кайфу ежжи", "31 августа", "отчисление автоматом"],
        "correct_answer": "ч+10мин * n(n=кол-во начальников между начальником академии и курсантом)",
        "points": 1
    },
    {
        "id": 24,
        "type": "single_choice",
        "question": "Задание №24\nСитуационная задача: боевого товарища в командировке змея укусила в хуй. Ваши действия?она не ядовитая",
        "options": ["Отсосу хуй", "Отсосу яд", "Отсосу начальнику", "Открою документ, регламентирующий деятельность медслужбы в условиях жаркого климата командировочного направления"],
        "correct_answer": "Открою документ, регламентирующий деятельность медслужбы в условиях жаркого климата командировочного направления",
        "points": 1
    },
    {
        "id": 25,
        "type": "single_choice",
        "question": "Задание №25\nСитуационная задача: ваш личный состав возращается сос трельб. как вы поступите?",
        "options": ["взорву их кубарь нахуй у них на глазах", "взорву их", "буду искать чай в грязных трусах", "ровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставитьровняйсь отставить"],
        "correct_answer": "взорву их кубарь нахуй у них на глазах",
        "points": 1
    },
    {
        "id": 26,
        "type": "single_choice",
        "question": "Задание №26\nГрафик смен Отстрела Банипаева",
        "options": ["30/30 вахта", "7/0", "5/2", "2/2", "как по кайфу ежжи"],
        "correct_answer": "30/30 вахта",
        "points": 3
    },
    {
        "id": 27,
        "type": "matching",
        "question": "Задание №27\nЗначение имени в родноверии\n",
        "left_options": ["Жопослав", "Дрочеврат", "Мачупил", "Дристамысл", "Пердун", "Говнарь"],
        "right_options": ["жизнь опознавший славную", "друзей чествующий в рати", "мудрость арийскую чувствующий под истинной любовью", "друзьями истинно мыслящий", "Перуну друг названный", "говорящий настоящей радостью"],
        "correct_matches": {
            "Жопослав": "жизнь опознавший славную",
            "Дрочеврат": "друзей чествующий в рати",
            "Мачупил": "мудрость арийскую чувствующий под истинной любовью",
            "Дристамысл": "друзьями истинно мыслящий",
            "Пердун": "Перуну друг названный",
            "Говнарь": "говорящий настоящей радостью"
        },
        "points": 5
    },
    {
        "id": 28,
        "type": "multiple_choice",
        "question": "Задание №28\n\"Ситуационная задача: патрулю въебались Далгажин, Порнкопенко и Хлебенко. Кто пойдет жить в ГК?\"",
        "options": ["Далгажин", "Порнкопенко", "Хлебенко", "Стриков", "Семенчук", "Чумишеев"],
        "correct_answers": ["Стриков", "Семенчук", "Чумишеев"],
        "points": 3
    },
    {
        "id": 29,
        "type": "single_choice",
        "question": "Задание №29\nНА наоутбуках в секретном классе нужно...",
        "options": ["скачивать все к себе на флешку", "смотреть фильмы", "учить жестко учебу(секретную)", "составлять тесты", "позвонить згт по дискорду"],
        "correct_answer": "учить жестко учебу(секретную)",
        "points": 1
    },
    {
        "id": 30,
        "type": "single_choice",
        "question": "Задание №30\nСколько выделяется курсанту на переодевание из жёлтой парки в синюю",
        "options": ["как по кайфу ежжи", "6 лет + орда", "нет денег купить синюю", "прыткевич сосать", "бегу кабанчиком"],
        "correct_answer": "как по кайфу ежжи",
        "points": 1
    }
]

MAX_SCORE = sum(q['points'] for q in questions)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "Профотбор 2019. Автор - курсант Косариков. Чтобы начать тест, набери /test.")

@bot.message_handler(commands=['test'])
def start_quiz(message):
    chat_id = message.chat.id
    shuffled_questions = list(questions)
    random.shuffle(shuffled_questions)

    user_states[chat_id] = {
        "current_question_index": 0,
        "score": 0,
        "shuffled_questions": shuffled_questions
    }
    send_question(chat_id)

def send_question(chat_id):
    current_index = user_states[chat_id]["current_question_index"]
    shuffled_questions_for_user = user_states[chat_id]["shuffled_questions"]

    if current_index < len(shuffled_questions_for_user):
        q_data = shuffled_questions_for_user[current_index]

        # Обновляем номер задания на последовательный
        original_question_lines = q_data["question"].split('\n', 1)
        question_content = original_question_lines[1] if len(original_question_lines) > 1 else original_question_lines[0]
        question_text_with_sequential_number = f"Задание №{current_index + 1}\n{question_content}"

        markup = types.ReplyKeyboardRemove()

        if q_data["type"] == "single_choice":
            markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True)
            for option in q_data["options"]:
                markup.add(types.KeyboardButton(option))
            bot.send_message(chat_id, question_text_with_sequential_number, reply_markup=markup)
        elif q_data["type"] == "multiple_choice":
            options_text = "\n".join([f"{i+1}) {option}" for i, option in enumerate(q_data["options"])])
            bot.send_message(chat_id, f"{question_text_with_sequential_number}\n\nВарианты:\n{options_text}\n\n(Введите номера правильных вариантов через запятую, например: 1,3)", reply_markup=markup)
        elif q_data["type"] == "open_answer":
            bot.send_message(chat_id, question_text_with_sequential_number, reply_markup=markup)
        elif q_data["type"] == "matching":
            matching_text = ""
            for i, left_opt in enumerate(q_data["left_options"]):
                matching_text += f"{i+1}) {left_opt}\n"
            matching_text += "\nСопоставьте:\n"
            for i, right_opt in enumerate(q_data["right_options"]):
                matching_text += f"{i+1}) {right_opt}\n"
            bot.send_message(chat_id, f"{question_text_with_sequential_number}\n\n{matching_text}\n(Введите соответствия в формате: 1=2, 2=4, 3=1 и т.д.)", reply_markup=markup)
        elif q_data["type"] == "ordering":
            ordering_text = "\n".join([f"{i+1}) {option}" for i, option in enumerate(q_data["options"])])
            bot.send_message(chat_id, f"{question_text_with_sequential_number}\n\nЭлементы:\n{ordering_text}\n\n(Введите номера элементов в правильном порядке через запятую, например: 1,5,2,3)", reply_markup=markup)

    else:
        show_results(chat_id)

def show_results(chat_id):
    score = user_states[chat_id]["score"]
    percentage = (score / MAX_SCORE) * 100 if MAX_SCORE > 0 else 0

    result_message = f"Тест завершен!\nВаш результат: {percentage:.2f}% верных ответов.\n\n"

    if percentage >= 95:
        result_message += "Ваш статус: пидорас!"
    elif percentage >= 85:
        result_message += "Ваш статус: истинный курсант"
    elif percentage >= 75:
        result_message += "Ваш статус: отчислен"
    elif percentage >= 65:
        result_message += "Ваш статус: самый умный"
    elif percentage >= 55:
        result_message += "Ваш статус: лютый"
    elif percentage >= 45:
        result_message += "Ваш статус: раниль"
    elif percentage >= 35:
        result_message += "Ваш статус: чурек"
    elif percentage >= 25:
        result_message += "Ваш статус: уже смешарик"
    elif percentage >= 15:
        result_message += "Ваш статус: долбаеб"
    elif percentage >= 5:
        result_message += "Ваш статус: пубертатная язва"
    else:
        result_message += "Ваш статус: нахуй"

    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("/test"))
    bot.send_message(chat_id, result_message, reply_markup=markup)
    del user_states[chat_id]

@bot.message_handler(func=lambda message: message.chat.id in user_states and user_states[message.chat.id]["current_question_index"] < len(user_states[message.chat.id]["shuffled_questions"]))
def handle_answer(message):
    chat_id = message.chat.id
    current_index = user_states[chat_id]["current_question_index"]
    q_data = user_states[chat_id]["shuffled_questions"][current_index]
    user_answer_raw = message.text.strip()
    is_correct = False

    q_type = q_data["type"]

    if q_type == "single_choice":
        if user_answer_raw == q_data["correct_answer"]:
            is_correct = True
    elif q_type == "multiple_choice":
        try:
            user_selected_indices = sorted(list(map(int, user_answer_raw.replace(' ', '').split(','))))
            user_selected_options = [q_data["options"][i - 1] for i in user_selected_indices if 0 < i <= len(q_data["options"])]
            correct_options_set = set(q_data["correct_answers"])
            user_options_set = set(user_selected_options)
            if user_options_set == correct_options_set:
                is_correct = True
        except (ValueError, IndexError):
            is_correct = False
    elif q_type == "open_answer":
        if user_answer_raw.lower() == q_data["correct_answer"].lower():
            is_correct = True
    elif q_type == "matching":
        try:
            user_matches_list = [m.strip().split('=') for m in user_answer_raw.replace(' ', '').split(',')]
            user_matches = {}
            valid_input = True
            for k, v in user_matches_list:
                k_int = int(k)
                v_int = int(v)
                if not (0 < k_int <= len(q_data["left_options"]) and 0 < v_int <= len(q_data["right_options"])):
                    valid_input = False
                    break
                user_matches[q_data["left_options"][k_int - 1]] = q_data["right_options"][v_int - 1]

            if valid_input and user_matches == q_data["correct_matches"]:
                is_correct = True
            else:
                is_correct = False
        except (ValueError, IndexError, KeyError):
            is_correct = False
    elif q_type == "ordering":
        try:
            user_order_indices = list(map(int, user_answer_raw.replace(' ', '').split(',')))
            if len(user_order_indices) != len(q_data["options"]):
                is_correct = False
            else:
                user_ordered_options = []
                valid_input = True
                for i in user_order_indices:
                    if 0 < i <= len(q_data["options"]):
                        user_ordered_options.append(q_data["options"][i - 1])
                    else:
                        valid_input = False
                        break
                if valid_input and user_ordered_options == q_data["correct_order"]:
                    is_correct = True
                else:
                    is_correct = False
        except (ValueError, IndexError):
            is_correct = False

    if is_correct:
        user_states[chat_id]["score"] += q_data["points"]

    user_states[chat_id]["current_question_index"] += 1
    send_question(chat_id)


# --- НОВАЯ СЕКЦИЯ ДЛЯ WEBHHOOKS ---

# Это основной эндпоинт, на который Telegram будет отправлять обновления
@app.route('/' + TOKEN, methods=['POST'])
def get_message():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200 # Важно всегда возвращать 200 OK

# Это вспомогательный эндпоинт для установки вебхука
# Его нужно вызвать ОДИН РАЗ после деплоя бота на хостинг
@app.route('/setwebhook')
def set_webhook_route():
    # Замени "YOUR_RENDER_APP_URL_HERE" на реальный URL, который даст Render
    # Например: https://my-awesome-bot.onrender.com
    webhook_url = f"YOUR_RENDER_APP_URL_HERE/{TOKEN}"
    try:
        bot.set_webhook(url=webhook_url)
        return f"Webhook successfully set to {webhook_url}", 200
    except Exception as e:
        return f"Failed to set webhook: {e}", 500

# Запуск Flask приложения
if __name__ == '__main__':
    # Эта часть запускается только при локальном тестировании
    # При деплое на Render, Render сам запускает приложение
    print("Бот запущен локально (для тестирования). Для деплоя используйте Procfile.")
    # Пример локального запуска, на хостинге Render порт задается через env
    # app.run(host="0.0.0.0", port=5000)

    # Если ты хочешь установить вебхук сразу при локальном запуске (для тестирования),
    # но помни, что тебе нужно иметь публичный URL (например, через ngrok) для локального хоста.
    # Это сложно для новичка, поэтому лучше установить вебхук один раз через /setwebhook после деплоя.
    pass # Удалить или закомментировать 'pass' и использовать app.run если хочешь локально тестировать вебхуки с помощью ngrok